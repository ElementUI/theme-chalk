@import "function";
@import "../common/var";

/* Break-points
 -------------------------- */
@mixin res($key, $map: $--breakpoints) {
  // 循环断点Map，如果存在则返回
  @if map-has-key($map, $key) {
    @if $key=='sm-only'or $key=='md-only'or $key=='lg-only' {
      // 判定特定定义处理字符串参数值问题
      @media only screen and #{unquote(map-get($map, $key))} {
        @content;
      }
    }

    @else {
      @media only screen and #{inspect(map-get($map, $key))} {
        @content;
      }
    }
  } @else {
    @warn "Undefeined points: `#{$map}`";
  }
}

/* Scrollbar
 -------------------------- */
@mixin scroll-bar {
  $--scrollbar-thumb-background: #b4bccc;
  $--scrollbar-track-background: #fff;

  &::-webkit-scrollbar {
    z-index: 11;
    width: 6px;

    &:horizontal {
      height: 6px;
    }

    &-thumb {
      border-radius: 5px;
      width: 6px;
      background: $--scrollbar-thumb-background;
    }

    &-corner {
      background: $--scrollbar-track-background;
    }

    &-track {
      background: $--scrollbar-track-background;

      &-piece {
        background: $--scrollbar-track-background;
        width: 6px;
      }
    }
  }
}

/* Placeholder
 -------------------------- */
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

/* BEM
 -------------------------- */

$_BEM: (null, null, null);

@mixin b($block) {
  $lastBEM: $_BEM;
  $_BEM: ($block, null, null) !global;

  .#{$namespace}-#{$block} {
    @content;
  }

  $_BEM: $lastBEM !global;
}

@mixin e($elements) {
  $block: nth($_BEM, 1);
  $old-elements: nth($_BEM, 2);

  @if null == $block {
    @error "Base-level rules cannot contain an element mixin";
  } @else {
    $lastBEM: $_BEM;
    $_BEM: ($block, $elements, null) !global;

    $parents: ();

    @if (null == $old-elements) {
      $parents: append($parents, ".#{$namespace}-#{$block}");
    } @else {
      @each $element in $old-elements {
        $parents: append($parents, ".#{$namespace}-#{$block}#{$element-separator}#{$element}");
      }
    }

    $current: ();

    @each $element in $elements {
      @each $parent in $parents {
        $current: append(
          $current,
          bem-extend(&, $parent, ".#{$namespace}-#{$block}#{$element-separator}#{$element}"),
          "comma",
        );
      }
    }

    @at-root {
      #{$current} {
        @content;
      }
    }

    $_BEM: $lastBEM !global;
  }
}

@mixin m($modifiers) {
  $block: nth($_BEM, 1);
  $elements: nth($_BEM, 2);
  $old-modifiers: nth($_BEM, 3);

  @if null == $block {
    @error "Base-level rules cannot contain a modifier mixin";
  } @else if null != $old-modifiers {
    @error "Modifier-level rules cannot contain another modifier mixin";
  } @else {
    $lastBEM: $_BEM;
    $_BEM: ($block, $elements, $modifiers) !global;

    $parents: ();

    @if (null == $elements) {
      $parents: append($parents, ".#{$namespace}-#{$block}");
    } @else {
      @each $element in $elements {
        $parents: append($parents, ".#{$namespace}-#{$block}#{$element-separator}#{$element}");
      }
    }

    $current: ();

    @each $modifier in $modifiers {
      @each $parent in $parents {
        $current: append(
          $current,
          bem-extend(&, $parents, "#{$parent}#{$modifier-separator}#{$modifier}"),
          "comma",
        );
      }
    }

    @at-root {
      #{$current} {
        @content;
      }
    }

    $_BEM: $lastBEM !global;
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin extend-rule($name) {
  @extend #{'%shared-'+$name};
}

@mixin share-rule($name) {
  $rule-name: '%shared-'+$name;

  @at-root #{$rule-name} {
    @content;
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content;
  }
}
